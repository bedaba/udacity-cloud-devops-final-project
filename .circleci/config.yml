version: 2.1

commands:

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
            

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install



  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
              sudo apt-get update
              sudo apt install python3-pip 
              python3 -m pip -V
              python3 -m pip install --user ansible 



  

  

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
 
            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7} 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            if(( $SUCCESS ==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

  test-frontend:
    docker:
     - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Unit Test
          command: |
            cd frontend
            npm install
            npm test
      
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end Unite Test
          command: |
            cd backend
            npm install
            npm test
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-deps
            
  scan-frontend:
    docker:
       - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
       - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
       - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure frontend infrastructure exist
          command: |
             aws cloudformation deploy \
             --template-file .circleci/files/frontend.yml \
             --tags project=udapeople \
             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure backend infrastructure exist
          command: |
             aws cloudformation deploy \
             --template-file .circleci/files/backend.yml \
             --tags project=udapeople \
             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt



      - destroy-environment     

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["0f:6b:c6:07:9d:1e:8b:4e:23:01:88:7b:3d:85:ee:77"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
             cd .circleci/ansible
             cat inventory.txt
             ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment     



  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment
      - revert-migrations


     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].instances[*].PublicIpAddress' \
              --output text)

            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - destroy-environment
      - revert-migrations
#       # Here's where you will add some code to rollback on failure      


  # deploy-backend:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["0f:6b:c6:07:9d:1e:8b:4e:23:01:88:7b:3d:85:ee:77"]
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
  #           echo $TYPEORM_HOST >> .circleci/ansible/inventory.txt
  #           cd backend
  #           npm i
  #           npm run build
  #           tar -czf artifact.tar.gz dist/* package*
  #           cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
  #           ls ../.circleci/ansible/roles/deploy/
  #           cd ../.circleci/ansible
  #           ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]


# version: 2.1
# commands:
#   dependencies:
#     steps:
#       - run:
#           name: Installing necessary packages
#           command: |
#             sudo apt update
#             sudo apt install -y tar gzip curl software-properties-common
#       - run:
#           name: Installing aws-cli
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: Installing ansible
#           command: |
#             sudo add-apt-repository --yes --update ppa:ansible/ansible
#             sudo apt install ansible
#   destroy-environment:
#     parameters:
#       workflow_id:
#         type: string
#     steps:
#       - run:
#           name: Destroying environment
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack \
#               --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
#             aws cloudformation delete-stack \
#               --stack-name "udapeople-backend-<< parameters.workflow_id >>"
#             aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive

#   revert-migrations:
#     parameters:
#       workflow_id:
#         type: string
#     steps:
#       - run:
#           name: Reverting migrations
#           when: on_fail
#           command: |
#             SUCCESS=$(curl "https://kvdb.io/XMktNjiEDBDysYMpLcBQvT//migration_<<parameters.workflow_id>>" -H "X-Api-Key: ${THISDB_API_KEY}")
#             if (($SUCCESS == 1)); then
#               cd backend
#               npm install
#               npm run migrations:revert
#             fi
            
# jobs:
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: 
#           - build-frontend
#       - run:
#           name: "build the front-end"
#           command: |
#             cd frontend
#             npm install
#             npm run build
#       - save_cache:
#           key: build-frontend
#           paths:
#             - frontend/node_modules
#   build-backend:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-deps]
#       - run:
#           name: Back-end build
#           command: |
#             cd backend
#             npm install
#             npm run build
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-deps

#   test-backend:
#     docker:
#       - image: circleci/node:13.8.0
#       # Docker image here
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - build-backend
#       - run:
#           name: Testing backend
#           command: |
#             cd backend
#             npm install
#             npm run test
#   test-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - build-frontend
#       - run:
#           name: Testing frontend
#           command: |
#             cd frontend
#             npm install
#             npm run test
            
#   scan-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - build-frontend
#       - run:
#           name: Scanning backend
#           command: |
#             cd backend
#             npm install
#             npm audit fix --audit-level=critical --force

#   scan-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - build-frontend
#       - run:
#           name: Scanning frontend
#           command: |
#             cd frontend
#             npm install
#             npm audit fix --audit-level=critical --force

#   deploy-infrastructure:
#     docker:
#       - image: cimg/base:2021.04
#     steps:
#       - checkout
#       - dependencies
#       # Checkout code from git
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/backend.yml \
#             --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
#             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
#             --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/frontend.yml \
#             --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
#             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
#             --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             aws cloudformation describe-stacks \
#             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --query "Stacks[0].Outputs[0].OutputValue" \
#             --output text >> .circleci/ansible/inventory.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       - destroy-environment:
#           workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'  


#   configure-infrastructure:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - install_ansible
#       - add_ssh_keys:
#           fingerprints: ["0f:6b:c6:07:9d:1e:8b:4e:23:01:88:7b:3d:85:ee:77"]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Configure server
#           command: |
#              cd .circleci/ansible
#              cat inventory.txt
#              ansible-playbook -i inventory.txt configure-server.yml
#       - destroy-environment     
 



#   run-migrations:
#     docker:
#       - image: sleavely/node-awscli:14.x
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - build-backend
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             cat .env
#             npm i
#             npm run build
#             npm run migrations > migrations_dump.txt
#             cat migrations_dump.txt
            
#       - run:
#           name: Sending migration status to kvdb
#           command: |
#             if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
#             then
#               curl https://kvdb.io/XMktNjiEDBDysYMpLcBQvT//migration_${CIRCLE_WORKFLOW_ID:0:7} \
#                 -H "X-Api-Key: ${THISDB_API_KEY}" \
#                 -d "1"
#             else
#               curl https://kvdb.io/XMktNjiEDBDysYMpLcBQvT//migration_${CIRCLE_WORKFLOW_ID:0:7} \
#                 -H "X-Api-Key: ${THISDB_API_KEY}" \
#                 -d "0"
#             fi
#       - destroy-environment:
#            workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
#       - destroy-environment:
#            workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

#   deploy-frontend:
#     docker:
#       - image: cimg/node:13.14.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - build-frontend
#       - dependencies
#       - run:
#           name: Get backend url
#           command: |
#              BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[0].OutputValue" --output text)
#              API_URL="http://${BACKEND_IP}:3030"
#              echo "API_URL=${API_URL}" >> frontend/.env
#       - run:
#           name: Deploy frontend objects
#           working_directory: ./frontend
#           command: |
#             npm i
#             npm run build
#             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
#             aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
#       - destroy-environment:
#            workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
#       - revert-migrations:
#            workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
#   #     # Here's where you will add some code to rollback on failure
#       - destroy-environment:
#            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
# #       # Here's where you will add some code to rollback on failure      


#   deploy-backend:
#     docker:
#       - image: python:3.7-alpine3.11
#         environment:
#           NODE_ENV: "production"
#           VERSION: "1"
#           ENVIRONMENT: "production"
#           TYPEORM_CONNECTION: $TYPEORM_CONNECTION
#           TYPEORM_HOST: $TYPEORM_HOST
#           TYPEORM_USERNAME: $TYPEORM_USERNAME
#           TYPEORM_PASSWORD: $TYPEORM_PASSWORD
#           TYPEORM_DATABASE: $TYPEORM_DATABASE
#           TYPEORM_PORT: $TYPEORM_PORT
#           TYPEORM_ENTITIES: $TYPEORM_ENTITIES       
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["0f:6b:c6:07:9d:1e:8b:4e:23:01:88:7b:3d:85:ee:77"]
#       - attach_workspace: 
#           at: ~/
#       - restore_cache:
#           keys:
#             - build-backend
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible nodejs npm tar gzip
#       - run:
#           name: Deploy backend
#           command: |
#             cd backend
#             npm install
#             npm run build
#             cd ..
#             tar -C backend -czvf artifact.tar.gz .
#             cat ~/project/.circleci/ansible/inventory.txt
#             ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml

#       # - destroy-environment:

#   smoke-test-backend:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update curl
#             pip install awscli
#       - run:
#           name: Backend smoke test
#           command: |
#              BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
#              API_URL="http://${BACKEND_IP}:3030"
#              curl "${API_URL}/api/status"

#   smoke-test-frontend:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update curl
#             pip install awscli
#       - run:
#           name: Smoke test for front end
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"             
#             echo ${URL} 
#             if curl -s ${URL} | grep "Welcome"
#             then
#               exit 0
#             else
#               exit 1
#             fi           
#       - destroy-environment:
#            workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
#       - revert-migrations:
#            workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}' 
 
#   cloudfront-update:
#     docker:
#       - image: cimg/base:2021.04
#     steps:
#       - checkout
#       - dependencies
#       - run:
#           name: get old workflow for clean
#           command: |
#             OldWorkflowID=$(aws cloudformation \
#             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#             --no-paginate --output text)
#             curl https://kvdb.io/XMktNjiEDBDysYMpLcBQvT//migration_${CIRCLE_WORKFLOW_ID:0:7} \
#             -H "X-Api-Key: ${THISDB_API_KEY}" \
#             -d "$OldWorkflowID"  
#       - run:
#           name: Updating cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/cloudfront.yml \
#             --stack-name InitialStack \
#             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#             --tags project=udapeople

#       - destroy-environment:
#            workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
#       - revert-migrations:
#            workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

#   cleanup:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ 6f4e40c == "" ]]
#             then
#             echo "No workflow id found"
#             else
#             if [[ "683c244" != "6f4e40c" ]]
#             then
#               echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
#               aws s3 rm "s3://udapeople-6f4e40c" --recursive
#               aws cloudformation delete-stack --stack-name "udapeople-frontend-6f4e40c"
#               aws cloudformation delete-stack --stack-name "udapeople-backend-6f4e40c"
#             fi
#             fi

# workflows:
#   default:
#     jobs:
#        - build-frontend
#        - build-backend
#        - test-frontend:
#            requires: [build-frontend]
#        - test-backend:
#            requires: [build-backend]
#        - scan-backend:
#            requires: [build-backend]
#        - scan-frontend:
#            requires: [build-frontend]
#        - deploy-infrastructure:
#            requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#        - configure-infrastructure:
#            requires: [deploy-infrastructure]
#        - run-migrations:
#            requires: [configure-infrastructure]
#        - deploy-frontend:
#            requires: [run-migrations]
#        - deploy-backend:
#            requires: [run-migrations]
#        - smoke-test-backend:
#            requires: [deploy-backend]
#        - smoke-test-frontend:
#            requires: [deploy-frontend]
      
#        - cloudfront-update:
#            requires: [smoke-test-backend,smoke-test-frontend]
#        - cleanup:
#            requires: [smoke-test-backend,smoke-test-frontend]
#        - cleanup:
#            requires: [cloudfront-update]